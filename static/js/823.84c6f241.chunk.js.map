{"version":3,"file":"static/js/823.84c6f241.chunk.js","mappings":"wOACA,GAAgB,WAAa,4BCA7B,EAA4B,0BAA5B,EAAmE,2BAAnE,EAAkH,kCAAlH,EAAyO,iC,sCCiDzO,EA3CkB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACnB,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eACA,GAAsCC,EAAAA,EAAAA,UAASD,EAAaE,IAAI,UAAhE,eAAOC,EAAP,KAAoBC,EAApB,KAkBA,OACE,mBAAQC,UAAWC,EAAnB,UACE,kBAAMD,UAAWC,EAAmBR,SAdf,SAAAS,GACvBA,EAAEC,iBAEGL,EAKLL,EAASK,GAJPM,IAAAA,OAAAA,QAAwB,8BAUxB,WACE,mBAAQC,KAAK,SAASL,UAAWC,EAAjC,UACE,SAAC,MAAD,OAGF,kBACED,UAAWC,EACXK,MAAOR,GAAe,GACtBS,SA1BkB,SAAAL,GACxBH,EAAeG,EAAEM,cAAcF,MAAMG,gBA0B/BJ,KAAK,OACLK,YAAY,wBCgBtB,EAhDe,WACb,OAA4Bd,EAAAA,EAAAA,UAAS,IAArC,eAAOe,EAAP,KAAeC,EAAf,KACA,GAAwClB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBkB,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MAsBjB,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQtB,EAAaE,IAAI,SAE3BoB,IACFC,EAAAA,EAAAA,IAAaD,GAAOE,MAAK,SAAAC,GACvB,IAAKA,EAAKC,cAIR,MAHAC,EAAAA,OAAAA,QAAe,0CAA2C,CACxDC,cAAc,IAEV,IAAIC,MAEZZ,EAAUQ,EAAKK,cAGlB,CAAC9B,KAGF,4BACE,SAAC+B,EAAD,CAAWjC,SAtBM,SAAAwB,GACnBJ,EAAgB,CAAEI,MAAOA,OAsBtBN,EAAOgB,OAAS,IACf,+BACE,eAAI3B,UAAWC,EAAAA,YAAf,SACGU,EAAOiB,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMnB,GAAhD,SACGe,EAAMK,SAFFL,EAAME,gB,0MCvCzBI,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,oGACVD,IAAAA,IAAA,mCAAsCD,IAD5B,cAC3BG,EAD2B,yBAE1BA,EAASlB,MAFiB,2CAAH,qDAKnBF,EAAY,mCAAG,WAAMD,GAAN,uFACHmB,IAAAA,IAAA,6BACCnB,EADD,oBACkBkB,EADlB,+CADG,cACpBG,EADoB,yBAInBA,EAASlB,MAJU,2CAAH,sDAOZmB,EAAe,mCAAG,WAAMC,GAAN,uFACNJ,IAAAA,IAAA,gBACZI,EADY,oBACQL,EADR,oBADM,cACvBG,EADuB,yBAItBA,EAASlB,MAJa,2CAAH,sDAOfqB,EAAY,mCAAG,WAAMC,GAAN,uFACHN,IAAAA,IAAA,gBACZM,EADY,4BACeP,EADf,oBADG,cACpBG,EADoB,yBAInBA,EAASlB,MAJU,2CAAH,sDAOZuB,EAAe,mCAAG,WAAMC,GAAN,uFACNR,IAAAA,IAAA,gBACZQ,EADY,4BACiBT,EADjB,2BADM,cACvBG,EADuB,yBAItBA,EAASlB,MAJa,2CAAH","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","webpack://react-homework-template/./src/components/Search/Search.module.css?06df","components/Search/index.jsx","pages/Movies/index.jsx","service/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_list\":\"Movies_movie_list__MTC+Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Search_searchbar__uR8cQ\",\"searchForm\":\"Search_searchForm__0FeD+\",\"searchForm_button\":\"Search_searchForm_button__+UuvX\",\"searchForm_button_label\":\"Search_searchForm_button_label__k+dSd\",\"searchForm_input\":\"Search_searchForm_input__VPke-\"};","import { useState } from 'react';\nimport styles from './Search.module.css';\nimport Notiflix from 'notiflix';\nimport { ImSearch } from 'react-icons/im';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [searchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(searchParams.get('query'));\n\n  const handleInputChange = e => {\n    setSearchQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSearchForm = e => {\n    e.preventDefault();\n\n    if (!searchQuery) {\n      Notiflix.Notify.failure('Please, fill out the form');\n      return;\n    }\n\n    onSubmit(searchQuery);\n    // setSearchQuery('');\n  };\n\n  return (\n    <header className={styles.searchbar}>\n      <form className={styles.searchForm} onSubmit={handleSearchForm}>\n        <button type=\"submit\" className={styles.searchForm_button}>\n          <ImSearch />\n        </button>\n\n        <input\n          className={styles.searchForm_input}\n          value={searchQuery || ''}\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"Search movies\"\n        />\n      </form>\n    </header>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { searchMovies } from '../../service/api';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport styles from './Movies.module.css';\nimport Searchbar from '../../components/Search';\nimport { Notify } from 'notiflix';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n\n  const handleSubmit = query => {\n    setSearchParams({ query: query });\n  };\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n\n    if (query) {\n      searchMovies(query).then(data => {\n        if (!data.total_results) {\n          Notify.failure('Sorry, no results matching your request', {\n            clickToClose: true,\n          });\n          throw new Error();\n        }\n        setMovies(data.results);\n      });\n    }\n  }, [searchParams]);\n\n  return (\n    <div>\n      <Searchbar onSubmit={handleSubmit} />\n      {movies.length > 0 && (\n        <>\n          <ul className={styles.movies_list}>\n            {movies.map(movie => {\n              return (\n                <li key={movie.id}>\n                  <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                    {movie.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n\n// import { searchMovies } from '../../service/api';\n// import { useState, useEffect } from 'react';\n// import { useSearchParams, Link, useLocation } from 'react-router-dom';\n// import styles from './Movies.module.css';\n// import Searchbar from '../../components/Search';\n// import { Notify } from 'notiflix';\n\n// const Movies = () => {\n//   const [movies, setMovies] = useState([]);\n//   const location = useLocation();\n//   const [searchParams, setSearchParams] = useSearchParams();\n\n//   const handleSubmit = query => {\n//     setSearchParams({ query: query });\n//   };\n\n//   useEffect(() => {\n//     const query = searchParams.get('query');\n\n//     if (query) {\n//       searchMovies(query).then(data => {\n//         if (!data.total_results) {\n//           Notify.failure('Sorry, no results matching your request', {\n//             clickToClose: true,\n//           });\n//           throw new Error();\n//         }\n//         setMovies(data.results);\n//       });\n//     }\n//   }, [searchParams]);\n\n//   return (\n//     <div>\n//       <Searchbar onSubmit={handleSubmit} />\n//       {movies.length > 0 && (\n//         <ul className={styles.movies_list}>\n//           {movies.map(movie => {\n//             return (\n//               <li key={movie.id}>\n//                 <Link\n//                   to={`/movies/${movie.id}`}\n//                   state={{ from: location, searchQuery: location }}\n//                 >\n//                   {movie.title}\n//                 </Link>\n//               </li>\n//             );\n//           })}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '90fc78e66cc89a0a00dfef80ac9f3880';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?query=${query}&api_key=${API_KEY}&include_adult=false&page=1&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const response = await axios.get(\n    `movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async cast_id => {\n  const response = await axios.get(\n    `movie/${cast_id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async review_id => {\n  const response = await axios.get(\n    `movie/${review_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n"],"names":["onSubmit","useSearchParams","searchParams","useState","get","searchQuery","setSearchQuery","className","styles","e","preventDefault","Notiflix","type","value","onChange","currentTarget","toLowerCase","placeholder","movies","setMovies","setSearchParams","location","useLocation","useEffect","query","searchMovies","then","data","total_results","Notify","clickToClose","Error","results","Search","length","map","movie","to","id","state","from","title","API_KEY","axios","fetchTrendingMovies","response","getMovieDetails","movie_id","getMovieCast","cast_id","getMovieReviews","review_id"],"sourceRoot":""}